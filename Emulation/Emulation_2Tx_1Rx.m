%% 2TX-1RX modified Rx-complete Tx with encoding
% Receiver is being updated.
% Ruirong Chen University of Pittsburgh 

clear
close all
load emulatedSig_40M_MCS0_MID.mat   
load BPSK_40m_constellation.mat

% Params:
USE_WARPLAB_TXRX        = 1;           % Enable WARPLab-in-the-loop (otherwise sim-only)
WRITE_PNG_FILES         = 0;           % Enable writing plots to PNG
CHANNEL                 = 6;          % Channel to tune Tx and Rx radios

% Waveform params
MOD_ORDER               = 16;            % Modulation order (2/4/16 = BSPK/QPSK/16-QAM)
N_Data                  = 2250*4;
CodeRate                = 1/2;
scramble_init           = 93;
TX_SCALE                = 1.0;         % Scale for Tx waveform ([0:1])
INTERP_RATE             = 2;           % Interpolation rate (must be 2)
TX_SPATIAL_STREAM_SHIFT = 3;           % Number of samples to shift the transmission from RFB

% OFDM params
SC_IND_PILOTS           = [8 22 44 58];                           % Pilot subcarrier indices
SC_IND_DATA             = [2:4 6:7 9:18 20:21 23:27 39:40 42:43 45:57 59:64];     % Data subcarrier indices
N_SC                    = 64;                                     % Number of subcarriers
CP_LEN                  = 16;                                     % Cyclic prefix length
N_OFDM_SYMS             = N_Data/(CodeRate*length(SC_IND_DATA)*log2(MOD_ORDER));        % Number of OFDM symbols (must be even valued)
N_DATA_SYMS             = N_OFDM_SYMS * length(SC_IND_DATA);      % Number of data symbols (one per data-bearing subcarrier per OFDM symbol)
SC_N_Subcarrier         = [28 29 37 38];
% Rx processing params
FFT_OFFSET                    = 1;           % Number of CP samples to use in FFT (on average)
LTS_CORR_THRESH               = 0.8;         % Normalized threshold for LTS correlation
STS_CORR_THRESH               = 0.8;         % Normalized threshold for LTS correlation
DO_APPLY_CFO_CORRECTION       = 1;           % Enable CFO estimation/correction
DO_APPLY_PHASE_ERR_CORRECTION = 1;           % Enable Residual CFO estimation/correction
DO_APPLY_SFO_CORRECTION       = 1;           % Enable SFO estimation/correction
DECIMATE_RATE                 = INTERP_RATE;

% WARPLab experiment params
USE_AGC                 = false;        % Use the AGC if running on WARP hardware
MAX_TX_LEN              = 2^19;        % Maximum number of samples to use for this experiment
SAMP_PADDING            = 20000;         % Extra samples to receive to ensure both start and end of waveform visible
failed_lts            = 0;
failed_sts            = 0;
cf = 0;
if(USE_WARPLAB_TXRX)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Set up the WARPLab experiment
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    NUMNODES = 2;

    % Create a vector of node objects
    nodes   = wl_initNodes(NUMNODES);
    node_tx = nodes(1);
    node_rx = nodes(2);

    % Create a UDP broadcast trigger and tell each node to be ready for it
    eth_trig = wl_trigger_eth_udp_broadcast;
    wl_triggerManagerCmd(nodes, 'add_ethernet_trigger', [eth_trig]);

    % Read Trigger IDs into workspace
    trig_in_ids  = wl_getTriggerInputIDs(nodes(1));
    trig_out_ids = wl_getTriggerOutputIDs(nodes(1));

    % For both nodes, we will allow Ethernet to trigger the buffer baseband and the AGC
    wl_triggerManagerCmd(nodes, 'output_config_input_selection', [trig_out_ids.BASEBAND, trig_out_ids.AGC], [trig_in_ids.ETH_A]);

    % Set the trigger output delays.
    nodes.wl_triggerManagerCmd('output_config_delay', [trig_out_ids.BASEBAND], 0);
    nodes.wl_triggerManagerCmd('output_config_delay', [trig_out_ids.AGC], 3000);     %3000 ns delay before starting the AGC

    % Get IDs for the interfaces on the boards. 
    ifc_ids_TX = wl_getInterfaceIDs(node_tx);
    ifc_ids_RX = wl_getInterfaceIDs(node_rx);

    % Set up the TX / RX nodes and RF interfaces
    TX_RF     = ifc_ids_TX.RF_ON_BOARD;
    TX_RF_VEC = ifc_ids_TX.RF_ON_BOARD_VEC;
    TX_RF_ALL = ifc_ids_TX.RF_ALL;
    
    RX_RF     = ifc_ids_RX.RF_A;
    RX_RF_VEC = ifc_ids_RX.RF_A;
    RX_RF_ALL = ifc_ids_RX.RF_ALL;

    % Set up the interface for the experiment
    wl_interfaceCmd(node_tx, TX_RF_ALL, 'channel', 5, CHANNEL);
    wl_interfaceCmd(node_rx, RX_RF_ALL, 'channel', 5, CHANNEL);

    wl_interfaceCmd(node_tx, TX_RF_ALL, 'tx_gains', 3, 14);
    
    if(USE_AGC)
        wl_interfaceCmd(node_rx, RX_RF_ALL, 'rx_gain_mode', 'automatic');
        wl_basebandCmd(node_rx, 'agc_target', -13); %-13
    else
        wl_interfaceCmd(node_rx, RX_RF_ALL, 'rx_gain_mode', 'manual');
        RxGainRF = 2;                  % Rx RF Gain in [1:3]
        RxGainBB = 16;                 % Rx Baseband Gain in [0:31]
        wl_interfaceCmd(node_rx, RX_RF_ALL, 'rx_gains', RxGainRF, RxGainBB);
    end

    % Get parameters from the node
    SAMP_FREQ    = wl_basebandCmd(nodes(1), 'tx_buff_clk_freq');
    Ts           = 1/SAMP_FREQ;

    % We will read the transmitter's maximum I/Q buffer length
    % and assign that value to a temporary variable.
    %
    % NOTE:  We assume that the buffers sizes are the same for all interfaces

    maximum_buffer_len = min(MAX_TX_LEN, wl_basebandCmd(node_tx, TX_RF_VEC, 'tx_buff_max_num_samples'));
    example_mode_string = 'hw';
else
    % Use sane defaults for hardware-dependent params in sim-only version
    maximum_buffer_len  = min(MAX_TX_LEN, 2^20);
    SAMP_FREQ           = 40e6;
    example_mode_string = 'sim';
end

%% Define a half-band 2x interpolation filter response
interp_filt2 = zeros(1,43);
interp_filt2([1 3 5 7 9 11 13 15 17 19 21]) = [12 -32 72 -140 252 -422 682 -1086 1778 -3284 10364];
interp_filt2([23 25 27 29 31 33 35 37 39 41 43]) = interp_filt2(fliplr([1 3 5 7 9 11 13 15 17 19 21]));
interp_filt2(22) = 16384;
interp_filt2 = interp_filt2./max(abs(interp_filt2));

% Define the preamble
% Note: The STS symbols in the preamble meet the requirements needed by the
% AGC core at the receiver. Details on the operation of the AGC are
% available on the wiki: http://warpproject.org/trac/wiki/WARPLab/AGC
sts_f = zeros(1,64);
sts_f(1:27) = [0 0 0 0 -1-1i 0 0 0 -1-1i 0 0 0 1+1i 0 0 0 1+1i 0 0 0 1+1i 0 0 0 1+1i 0 0];
sts_f(39:64) = [0 0 1+1i 0 0 0 -1-1i 0 0 0 1+1i 0 0 0 -1-1i 0 0 0 -1-1i 0 0 0 1+1i 0 0 0];
sts_t = ifft(sqrt(13/6).*sts_f, 64);
sts_t = sts_t(1:16);

L_ltf_f = fftshift([0;0;0;0;0;0;1;1;-1;-1;1;1;-1;1;-1;1;1;1;1;1;1;-1;-1;1;1;-1;1;-1;1;1;1;1;0;1;-1;-1;1;1;-1;1;-1;1;-1;-1;-1;-1;-1;1;1;-1;-1;1;1;-1;-1;1;1;1;1;0;0;0;0;0]);

cfgOFDM = wlan.internal.wlanGetOFDMConfig('CBW20', 'Long', 'Legacy');

CPLen  = cfgOFDM.CyclicPrefixLength;


L_ltf_t = ifft(L_ltf_f,64);
LTF_MOD = wlan.internal.wlanOFDMModulate(L_ltf_f, CPLen);

% Scale and output
LTF_MOD_T = LTF_MOD * cfgOFDM.NormalizationFactor;

lts_f1 = [0.000000 + 0.000000i;0.000000 + 0.000000i;0.000000 + 0.000000i;0.000000 + 0.000000i;0.000000 + 0.000000i;0.000000 + 0.000000i;1.080123 - 0.1543034i;1.080123 + 0.1543034i;1.000000 + 0.000000i;-1.080123 + 0.1543034i;-1.080123 - 0.1543034i;1.080123 - 0.1543034i;-1.080123 - 0.1543034i;1.080123 + 0.1543034i;-1.080123 + 0.1543034i;1.080123 + 0.1543034i;1.080123 + 0.1543034i;1.080123 + 0.1543034i;1.080123 + 0.1543034i;1.080123 - 0.1543034i;1.080123 + 0.1543034i;-1.080123 - 0.1543034i;-1.080123 - 0.1543034i;1.080123 + 0.1543034i;1.080123 + 0.1543034i;-1.080123 - 0.1543034i;1.080123 + 0.1543034i;-1.080123 + 0.1543034i;1.080123 + 0.1543034i;1.080123 + 0.1543034i;1.080123 + 0.1543034i;1.080123 + 0.1543034i;0.1543034 - 0.1543034i;1.080123 + 0.1543034i;-1.080123 - 0.1543034i;-1.080123 + 0.1543034i;1.000000 + 0.000000i;1.080123 + 0.1543034i;-1.080123 - 0.1543034i;0.7715167 + 0.1543034i;-1.080123 + 0.1543034i;1.080123 + 0.1543034i;-1.080123 - 0.1543034i;-1.080123 - 0.1543034i;-1.080123 + 0.1543034i;-1.080123 - 0.1543034i;-1.080123 - 0.1543034i;1.080123 + 0.1543034i;1.080123 - 0.1543034i;-1.080123 - 0.1543034i;1.000000 + 0.000000i;1.080123 - 0.1543034i;1.080123 + 0.1543034i;-1.080123 - 0.1543034i;-1.080123 - 0.1543034i;1.080123 - 0.1543034i;1.080123 + 0.1543034i;1.080123 - 0.1543034i;1.080123 + 0.1543034i;-0.1543034 - 0.1543034i;0.000000 + 0.000000i;0.000000 + 0.000000i;0.000000 + 0.000000i;0.000000 + 0.000000i];
lts_t1 = ifft(ifftshift(lts_f1),64).';

lts_f2 = [0.000000 + 0.000000i;0.000000 + 0.000000i;0.000000 + 0.000000i;0.000000 + 0.000000i;0.000000 + 0.000000i;0.000000 + 0.000000i;0.8728716 + 0.2182179i;0.7715167 - 0.1543034i;-0.7071068 + 0.7071068i;-0.7715167 - 0.1543034i;-0.8728716 + 0.2182179i;0.7715167 + 0.1543034i;-0.8728716 + 0.2182179i;0.7715167 - 0.1543034i;-0.8728716 - 0.2182179i;0.7715167 - 0.1543034i;0.8728716 - 0.2182179i;0.7715167 - 0.1543034i;0.8728716 - 0.2182179i;0.7715167 + 0.1543034i;0.8728716 - 0.2182179i;-0.7715167 + 0.1543034i;-0.8728716 + 0.2182179i;0.7715167 - 0.1543034i;0.8728716 - 0.2182179i;-0.7715167 + 0.1543034i;0.8728716 - 0.2182179i;-0.7715167 - 0.1543034i;0.8728716 - 0.2182179i;0.7715167 - 0.1543034i;0.8728716 - 0.2182179i;0.7715167 - 0.1543034i;-0.2182179 + 0.000000i;0.7715167 - 0.1543034i;-0.8728716 + 0.2182179i;-0.7715167 - 0.1543034i;-0.7071068 + 0.7071068i;0.7715167 - 0.1543034i;-0.8728716 + 0.2182179i;1.080123 - 0.1543034i;-0.8728716 - 0.2182179i;0.7715167 - 0.1543034i;-0.8728716 + 0.2182179i;-0.7715167 + 0.1543034i;-0.8728716 - 0.2182179i;-0.7715167 + 0.1543034i;-0.8728716 + 0.2182179i;0.7715167 - 0.1543034i;0.8728716 + 0.2182179i;-0.7715167 + 0.1543034i;0.7071068 + 0.7071068i;0.7715167 + 0.1543034i;0.8728716 - 0.2182179i;-0.7715167 + 0.1543034i;-0.8728716 + 0.2182179i;0.7715167 + 0.1543034i;0.8728716 - 0.2182179i;0.7715167 + 0.1543034i;0.8728716 - 0.2182179i;0.1543034 + 0.1543034i;0.000000 + 0.000000i;0.000000 + 0.000000i;0.000000 + 0.000000i;0.000000 + 0.000000i];
lts_t2 = ifft(ifftshift(lts_f2),64).';



% LTS for CFO and channel estimation
lts_f = [0 1 -1 -1 1 1 -1 1 -1 1 -1 -1 -1 -1 -1 1 1 -1 -1 1 -1 1 -1 1 1 1 1 1 1 0 0 0 0 0 0 0 -1 -1 1 -1 -1 1 1 -1 1 -1 1 -1 -1 -1 -1 -1 1 1 -1 -1 1 -1 1 -1 1 1 1 1];
lts_f_shifted1 = lts_f*(1.08+0.46291i);
lts_f_shifted2 = lts_f*(1.09+0.43644i);
lts_t_shifted1 = ifft(lts_f_shifted1,64);
lts_t_shifted2 = ifft(lts_f_shifted2,64);

%[0 + 0i;0.947595572200122 + 4.82576980817190e-16i;-0.999464920400107 + 0.0327089114708313i;-0.947595572200122 + 4.02147484014325e-16i;0.149891062714697 + 0.361869036484338i;0.947595572200123 + 2.68098322676217e-16i;-0.999464920400107 + 0.0327089114708314i;0.947595572200123 + 1.38070636178252e-15i;-0.999464920400107 - 0.0327089114708320i;0.947595572200122 + 2.68098322676217e-16i;-0.999464920400107 + 0.0327089114708313i;-0.947595572200123 - 2.68098322676217e-16i;-0.999464920400107 - 0.0327089114708320i;-0.947595572200122 - 2.14478658140973e-16i;-0.999464920400107 + 0.0327089114708311i;0.947595572200122 + 1.00536871003581e-16i;0.999464920400107 + 0.0327089114708316i;-0.947595572200122 - 1.60858993605730e-16i;0.873629135683372 + 0.361869036484338i;0.947595572200122 + 3.48527819479082e-16i;0.999464920400107 - 0.0327089114708320i;-0.947595572200122 - 2.94908154943838e-16i;-0.999464920400107 + 0.0327089114708318i;0.947595572200122 + 8.04294968028650e-17i;0.999464920400107 - 0.0327089114708319i;0.947595572200122 + 1.07239329070487e-16i;0.999464920400107 - 0.0327089114708319i;8.04294968028650e-17 + 1.07239329070487e-16i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.999464920400107 + 0.0327089114708316i;0.947595572200123 + 1.31368178111346e-15i;0.149891062714697 + 0.361869036484337i;-0.947595572200122 + 8.57914632563893e-16i;-0.999464920400107 + 0.0327089114708309i;0.947595572200122 - 6.03221226021488e-17i;-0.999464920400108 + 0.0327089114708302i;0.947595572200123 + 5.36196645352433e-16i;-0.999464920400107 - 0.0327089114708313i;0.947595572200123 + 1.12601295524011e-15i;0.999464920400107 - 0.0327089114708318i;0.947595572200123 + 2.03754725233925e-15i;0.999464920400107 - 0.0327089114708310i;0.947595572200122 - 2.81503238810028e-16i;0.999464920400107 - 0.0327089114708304i;-0.947595572200122 - 4.28957316281947e-16i;-0.999464920400107 + 0.0327089114708311i;0.947595572200123 + 1.09920312297249e-15i;0.999464920400107 - 0.0327089114708316i;-0.947595572200123 - 5.36196645352433e-16i;0.999464920400107 - 0.0327089114708312i;-0.947595572200123 + 1.60858993605730e-16i;0.999464920400107 - 0.0327089114708319i;0.947595572200122 + 3.21717987211460e-16i;0.999464920400107 - 0.0327089114708312i;0.947595572200123 + 1.07239329070487e-15i].';

%1.08*[0 1 -1 -1 1 1 -1 1 -1 1 -1 -1 -1 -1 -1 1 1 -1 -1 1 -1 1 -1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 -1 -1 1 1 -1 1 -1 1 -1 -1 -1 -1 -1 1 1 -1 -1 1 -1 1 -1 1 1 1 1];
%lts_t = ifft((lts_f1+lts_f2)/2,64);
%lts_f = [0 + 0i;0.947595572200122 + 4.82576980817190e-16i;-0.999464920400107 + 0.0327089114708313i;-0.947595572200122 + 4.02147484014325e-16i;0.149891062714697 + 0.361869036484338i;0.947595572200123 + 2.68098322676217e-16i;-0.999464920400107 + 0.0327089114708314i;0.947595572200123 + 1.38070636178252e-15i;-0.999464920400107 - 0.0327089114708320i;0.947595572200122 + 2.68098322676217e-16i;-0.999464920400107 + 0.0327089114708313i;-0.947595572200123 - 2.68098322676217e-16i;-0.999464920400107 - 0.0327089114708320i;-0.947595572200122 - 2.14478658140973e-16i;-0.999464920400107 + 0.0327089114708311i;0.947595572200122 + 1.00536871003581e-16i;0.999464920400107 + 0.0327089114708316i;-0.947595572200122 - 1.60858993605730e-16i;0.873629135683372 + 0.361869036484338i;0.947595572200122 + 3.48527819479082e-16i;0.999464920400107 - 0.0327089114708320i;-0.947595572200122 - 2.94908154943838e-16i;-0.999464920400107 + 0.0327089114708318i;0.947595572200122 + 8.04294968028650e-17i;0.999464920400107 - 0.0327089114708319i;0.947595572200122 + 1.07239329070487e-16i;0.999464920400107 - 0.0327089114708319i;8.04294968028650e-17 + 1.07239329070487e-16i;0.000 + 0.000i;0.000 + 0.000i;0.000 + 0.000i;0.000 + 0.000i;0.000 + 0.000i;0.000 + 0.000i;0.000 + 0.000i;0.000 + 0.000i;0.000 + 0.000i;0.000 + 0.000i;0.999464920400107 + 0.0327089114708316i;0.947595572200123 + 1.31368178111346e-15i;0.149891062714697 + 0.361869036484337i;-0.947595572200122 + 8.57914632563893e-16i;-0.999464920400107 + 0.0327089114708309i;0.947595572200122 - 6.03221226021488e-17i;-0.999464920400108 + 0.0327089114708302i;0.947595572200123 + 5.36196645352433e-16i;-0.999464920400107 - 0.0327089114708313i;0.947595572200123 + 1.12601295524011e-15i;0.999464920400107 - 0.0327089114708318i;0.947595572200123 + 2.03754725233925e-15i;0.999464920400107 - 0.0327089114708310i;0.947595572200122 - 2.81503238810028e-16i;0.999464920400107 - 0.0327089114708304i;-0.947595572200122 - 4.28957316281947e-16i;-0.999464920400107 + 0.0327089114708311i;0.947595572200123 + 1.09920312297249e-15i;0.999464920400107 - 0.0327089114708316i;-0.947595572200123 - 5.36196645352433e-16i;0.999464920400107 - 0.0327089114708312i;-0.947595572200123 + 1.60858993605730e-16i;0.999464920400107 - 0.0327089114708319i;0.947595572200122 + 3.21717987211460e-16i;0.999464920400107 - 0.0327089114708312i;0.947595572200123 + 1.07239329070487e-15i].';

lts_t = ifft(lts_f,64);
% lts_f1 = lts_f + (0.1 - 0.1i);
% lts_t1 = ifft(lts_f,64);
% 
% lts_f2 = 1.09*[0 1 -1 -1 1 1 -1 1 -1 1 -1 -1 -1 -1 -1 1 1 -1 -1 1 -1 1 -1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 -1 -1 1 1 -1 1 -1 1 -1 -1 -1 -1 -1 1 1 -1 -1 1 -1 1 -1 1 1 1 1];
% lts_f2 = lts_f2 +(0.1 + 0.1i);
% lts_t2 = ifft(lts_f2,64);
L_stf1 = [0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;-0.154303349962092 + 0.154303349962092i;-0.154303349962092 + 0.154303349962092i;0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;1.00000000000000 + 0.00000000000000i;0.771516749810460 + 1.08012344973464i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.771516749810460 - 0.462910049886276i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;0.771516749810460 + 0.462910049886276i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.771516749810460 - 0.462910049886276i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.771516749810460 - 0.462910049886276i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;0.462910049886276 + 0.771516749810460i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;1.00000000000000 + 0.00000000000000i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.462910049886276 - 0.771516749810460i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;0.462910049886276 + 0.771516749810460i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;0.462910049886276 + 0.771516749810460i;-0.154303349962092 - 0.154303349962092i;1.00000000000000 + 0.00000000000000i;-0.154303349962092 - 0.154303349962092i;0.771516749810460 + 0.462910049886276i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;0.462910049886276 + 0.771516749810460i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;-0.154303349962092 - 0.154303349962092i;0.00000000000000 + 0.00000000000000i];
L_stf2 = [0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.218800000000000 + 0.00000000000000i;0.218800000000000 + 0.00000000000000i;-1.08012344973464 - 1.08012344973465i;2.22044604925031e-16 + 0.218217890235992i;0.00000000000000 + 0.218200000000000i;0.707106781186548 - 0.707106781186547i;0.771516749810461 + 0.462910049886274i;0.218217890235992 + 5.27355936696949e-16i;0.154303349962092 + 0.154303349962092i;-0.654653670707974 - 0.872871560943972i;0.154303349962092 + 0.154303349962092i;2.63677968348475e-16 + 0.218217890235992i;0.154303349962091 + 0.154303349962092i;0.654653670707977 + 0.872871560943970i;0.154303349962091 + 0.154303349962093i;0.218217890235992 + 4.85722573273506e-16i;0.154303349962092 + 0.154303349962092i;-0.654653670707974 - 0.872871560943972i;0.154303349962092 + 0.154303349962092i;0.218217890235992 + 4.57966997657877e-16i;0.154303349962091 + 0.154303349962092i;-0.654653670707977 - 0.872871560943970i;0.154303349962092 + 0.154303349962092i;0.218217890235992 + 4.30211422042248e-16i;0.154303349962092 + 0.154303349962092i;0.872871560943970 + 0.654653670707977i;0.154303349962092 + 0.154303349962092i;0.218217890235992 + 3.88578058618805e-16i;0.154303349962092 + 0.154303349962092i;-0.218217890235992 + 0.00000000000000i;0.154303349962092 + 0.154303349962092i;0.218217890235992 + 3.74700270810990e-16i;0.154303349962092 + 0.154303349962092i;0.707106781186548 - 0.707106781186548i;0.154303349962092 + 0.154303349962092i;0.218217890235992 + 3.46944695195361e-16i;0.154303349962092 + 0.154303349962092i;-0.872871560943970 - 0.654653670707977i;0.154303349962092 + 0.154303349962092i;0.218217890235992 + 3.19189119579733e-16i;0.154303349962092 + 0.154303349962092i;0.872871560943970 + 0.654653670707977i;0.154303349962092 + 0.154303349962092i;0.218217890235992 + 2.91433543964104e-16i;0.154303349962092 + 0.154303349962092i;0.872871560943970 + 0.654653670707977i;0.154303349962092 + 0.154303349962092i;0.707106781186547 + 0.707106781186548i;0.154303349962092 + 0.154303349962092i;0.654653670707977 + 0.872871560943970i;0.154303349962092 + 0.154303349962092i;0.218217890235992 + 5.55111512312578e-17i;0.154303349962092 + 0.154303349962092i;0.872871560943970 + 0.654653670707977i;0.154303349962092 + 0.154303349962092i;0.218217890235992 + 1.38777878078145e-17i;0.154303349962092 + 0.154303349962092i;0.00000000000000 + 0.00000000000000i];
L_stf = [0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;1.54303349962092 + 1.54303349962091i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;-1.42617042051843 - 1.33578161083025i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;1.42617042051844 + 1.33578161083025i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;-1.42617042051843 - 1.33578161083025i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;-1.42617042051844 - 1.33578161083025i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;1.33578161083025 + 1.42617042051844i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;-1.33578161083025 - 1.42617042051844i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;1.33578161083025 + 1.42617042051844i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;1.33578161083025 + 1.42617042051844i;0.00000000000000 + 0.00000000000000i;1.70710678118655 + 0.707106781186548i;0.00000000000000 + 0.00000000000000i;1.42617042051844 + 1.33578161083025i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;1.33578161083025 + 1.42617042051844i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i];
sts_t1 = ifft(ifftshift(L_stf1),64).';
sts_t2 = ifft(ifftshift(L_stf2),64).';
%sts_t = ifft(ifftshift(L_stf1+L_stf2),64).';

sts_t = ifft(ifftshift(L_stf,64)).';

% lts_t = LTF_MOD_T(17:end).';
% lts_f = L_ltf_f.';

lts_f_N = [1 1 1 1 -1 -1 1 1 -1 1 -1 1 -1 -1 -1 -1 -1 1 1 -1 -1 1 -1 1 -1 1 1 1 1 0 0 0 0 0 0 0  1 -1 -1 1 1 -1 1 -1 1 -1 -1 -1 -1 -1 1 1 -1 -1 1 -1 1 -1 1 1 1 1 -1 -1];
lts_t_N = ifft(lts_f_N, 64);

signal_various_symbolduration =[0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;-0.784464540552736 + 0.669582368388983i;-1.40424811089128 - 0.648122917453963i;-0.468519894283005 - 1.32827323214053i;-0.225925313666012 + 0.350930487291077i;-1.58025348210538 - 0.203410150021304i;-0.0652293708577287 - 0.845855919946260i;0.333335736032456 - 0.0537764042758659i;0.467343781649042 - 0.350273289159082i;0.530907319332675 - 0.138675049056307i;-0.355262446718471 + 0.978429017153310i;0.0167847558362331 + 0.458814893900854i;-0.350451487982058 - 0.739401254188419i;0.422208714406496 - 0.360034930855149i;-0.132071163298433 - 0.0999258705087681i;-0.819574145116395 - 0.452843539274950i;1.04590515688629 + 0.0287441491756596i;-0.310998307301938 + 0.196116135138184i;-0.389420952949673 + 0.202676771843148i;0.142417947191905 + 0.243097954005730i;-0.727323577456134 - 0.591724508437205i;0.957536357213790 - 1.07942394832033i;-0.272787769860475 - 0.893187336864132i;-1.00936578099593 - 0.896502319535764i;0.434136658214523 - 1.01956859056719i;-0.416025147168922 - 0.138675049056307i;0.452388637123137 + 0.308254830340176i;0.631617135199958 - 1.00917706297472i;-1.16678207433698 + 0.218086807901961i;-0.920578272195394 + 1.79542979666665i;0.202746856519313 - 0.284236781162723i;0.402016492746158 - 0.466680878069945i;-0.136825960594881 + 0.543005538487459i;-0.784464540552736 + 0.114882172163754i;-0.798082208137630 + 0.952683405745909i;0.613258970224354 + 0.688547767529141i;0.992736761463610 - 0.508133512259833i;0.355970917491170 - 0.141236366469957i;0.0685678116292172 + 0.367893108765277i;-1.43983438894671 + 0.481227293862193i;-1.29156586068322 + 0.272543908468554i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i];

Short_emulated = [0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;-1.30803059090126 + 3.92409177270378i;3.92409177270378 - 1.30803059090126i;8.47700708521628 - 1.77635683940025e-15i;-1.30803059090126 - 3.92409177270378i;3.92409177270378 - 1.30803059090126i;3.92409177270378 + 1.30803059090126i;1.30803059090126 - 6.54015295450630i;1.30803059090126 + 3.92409177270378i;1.30803059090126 - 1.30803059090126i;3.92409177270378 + 1.30803059090126i;-3.92409177270378 - 3.92409177270378i;-1.30803059090126 - 1.30803059090126i;-3.92409177270378 + 1.30803059090126i;1.30803059090126 + 6.54015295450630i;6.54015295450630 - 1.30803059090126i;1.30803059090126 - 1.30803059090126i;-3.92409177270378 - 3.92409177270378i;-1.30803059090126 + 1.30803059090126i;-1.30803059090126 - 3.92409177270378i;1.30803059090126 - 1.30803059090126i;-1.30803059090126 + 1.30803059090126i;-1.30803059090126 - 6.54015295450630i;-6.54015295450630 + 6.54015295450630i;1.30803059090126 - 3.92409177270378i;-1.30803059090126 + 3.92409177270378i;3.92409177270378 - 3.92409177270378i;-3.92409177270378 - 3.92409177270378i;-3.92409177270378 + 1.30803059090126i;-6.54015295450630 - 1.30803059090126i;1.30803059090126 + 1.30803059090126i;8.47700708521628 + 1.77635683940025e-15i;6.54015295450630 + 1.30803059090126i;-6.54015295450630 - 3.92409177270378i;-3.92409177270378 + 3.92409177270378i;3.92409177270378 + 1.30803059090126i;-3.92409177270378 - 3.92409177270378i;3.92409177270378 - 3.92409177270378i;-6.54015295450630 - 6.54015295450630i;-3.92409177270378 + 1.30803059090126i;-3.92409177270378 + 1.30803059090126i;-1.30803059090126 + 3.92409177270378i;1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 + 1.30803059090126i;8.47700708521628 + 1.77635683940025e-15i;-1.30803059090126 + 1.30803059090126i;-6.54015295450630 + 1.30803059090126i;-1.30803059090126 + 1.30803059090126i;-1.30803059090126 + 1.30803059090126i;-1.30803059090126 + 1.30803059090126i;1.30803059090126 + 3.92409177270378i;-1.30803059090126 - 1.30803059090126i;1.30803059090126 + 6.54015295450630i;-1.30803059090126 + 1.30803059090126i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i];

Short_emulated1 = [0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;3.69966920330292 + 1.84983460165145i;3.92409177270378 + 1.30803059090127i;5.99414919412285 - 5.99414919412284i;-1.30803059090127 - 6.54015295450630i;1.84983460165145 + 3.69966920330292i;1.30803059090126 + 1.30803059090126i;-1.84983460165144 - 3.69966920330292i;-1.30803059090127 + 3.92409177270378i;-2.66453525910038e-15 - 1.84983460165146i;3.92409177270379 - 1.30803059090125i;-3.69966920330291 - 5.54950380495437i;1.30803059090127 - 1.30803059090125i;-5.54950380495437 - 1.15463194561016e-14i;3.92409177270378 + 3.92409177270378i;1.84983460165147 - 3.69966920330290i;1.30803059090126 - 3.92409177270378i;-5.54950380495435 - 7.39933840660584i;-1.30803059090128 + 6.54015295450630i;-1.84983460165146 - 1.99840144432528e-15i;1.30803059090126 + 1.30803059090126i;-1.84983460165146 - 1.55431223447522e-15i;1.30803059090126 - 3.92409177270378i;-1.84983460165146 + 3.69966920330291i;1.30803059090126 - 1.30803059090126i;3.69966920330291 + 1.84983460165146i;-1.30803059090125 - 3.92409177270379i;-1.84983460165146 - 3.69966920330291i;-1.30803059090126 + 1.30803059090126i;-1.84983460165145 - 3.69966920330292i;-1.30803059090126 + 3.92409177270378i;5.99414919412284 - 5.99414919412285i;3.92409177270378 + 3.92409177270378i;-1.84983460165145 - 3.69966920330292i;1.30803059090125 + 3.92409177270379i;5.54950380495437 - 1.77635683940025e-15i;1.30803059090126 - 3.92409177270378i;1.84983460165146 + 3.10862446895044e-15i;-3.92409177270378 - 6.54015295450631i;-3.69966920330291 + 1.84983460165146i;-1.30803059090126 + 1.30803059090126i;1.84983460165146 + 0.00000000000000i;-1.30803059090126 - 1.30803059090126i;-3.69966920330291 - 1.84983460165145i;-3.92409177270378 + 1.30803059090126i;5.99414919412284 + 5.99414919412285i;-1.30803059090126 - 1.30803059090126i;-1.84983460165146 + 4.44089209850063e-16i;1.30803059090126 + 3.92409177270378i;-1.77635683940025e-15 + 1.84983460165146i;-3.92409177270378 - 1.30803059090126i;-1.84983460165146 + 3.69966920330291i;-3.92409177270378 - 1.30803059090126i;-1.84983460165146 + 3.69966920330291i;1.30803059090126 + 1.30803059090126i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i];

Pulse_f = [0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;8.47700708521628 - 1.77635683940025e-15i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;8.47700708521628 + 8.88178419700125e-16i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;8.47700708521628 + 1.77635683940025e-15i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;-1.30803059090126 - 1.30803059090126i;9.15621413630882 + 6.54015295450630i;3.92409177270378 + 6.54015295450630i;6.54015295450630 + 9.15621413630882i;3.92409177270378 + 6.54015295450630i;-1.30803059090126 - 1.30803059090126i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i];
Pulse_f1 = [0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;1.77635683940025e-15 + 1.84983460165146i;1.30803059090126 + 1.30803059090127i;5.99414919412284 - 5.99414919412284i;1.30803059090126 + 1.30803059090126i;1.84983460165146 + 3.99680288865056e-15i;1.30803059090126 + 1.30803059090126i;1.84983460165146 + 7.77156117237610e-15i;1.30803059090126 + 1.30803059090126i;1.33226762955019e-15 + 1.84983460165146i;1.30803059090125 + 1.30803059090127i;1.84983460165146 - 8.88178419700125e-16i;1.30803059090126 + 1.30803059090127i;1.84983460165145 + 3.77475828372553e-15i;1.30803059090126 + 1.30803059090126i;1.84983460165146 + 9.32587340685132e-15i;1.30803059090126 + 1.30803059090126i;1.84983460165146 + 2.66453525910038e-15i;1.30803059090126 + 1.30803059090127i;1.84983460165146 - 3.33066907387547e-16i;1.30803059090126 + 1.30803059090126i;1.84983460165146 + 5.32907051820075e-15i;1.30803059090126 + 1.30803059090126i;1.84983460165146 + 1.11022302462516e-15i;1.30803059090126 + 1.30803059090126i;1.84983460165146 + 3.77475828372553e-15i;1.30803059090126 + 1.30803059090126i;1.84983460165146 + 0.00000000000000i;1.30803059090126 + 1.30803059090126i;1.84983460165146 + 3.66373598126302e-15i;1.30803059090126 + 1.30803059090126i;5.99414919412284 - 5.99414919412284i;1.30803059090126 + 1.30803059090126i;1.84983460165146 + 3.10862446895044e-15i;1.30803059090126 + 1.30803059090126i;-1.77635683940025e-15 + 1.84983460165146i;1.30803059090126 + 1.30803059090126i;1.84983460165146 + 2.22044604925031e-15i;1.30803059090126 + 1.30803059090126i;4.44089209850063e-16 + 1.84983460165146i;1.30803059090126 + 1.30803059090126i;1.84983460165146 + 1.77635683940025e-15i;1.30803059090126 + 1.30803059090126i;-4.44089209850063e-16 + 1.84983460165146i;1.30803059090126 + 1.30803059090126i;5.99414919412283 + 5.99414919412285i;1.30803059090126 + 1.30803059090126i;1.84983460165146 + 1.77635683940025e-15i;1.30803059090126 + 1.30803059090126i;1.84983460165146 + 4.44089209850063e-16i;3.92409177270378 + 6.54015295450630i;7.39933840660583 + 5.54950380495437i;6.54015295450630 + 3.92409177270378i;7.39933840660582 + 5.54950380495437i;1.30803059090126 + 1.30803059090126i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i;0.00000000000000 + 0.00000000000000i];

Pulse_t  = [0.0500000000000000 + 0.0500000000000000i;0.0702007610343501 + 0.00344874224103679i;0.0533516690710355 - 0.0437845832619082i;0.00982118697983878 - 0.0662090645892645i;-0.0355969883127822 - 0.0532746578424459i;-0.0586794818341693 - 0.0146984450302420i;-0.0496187773685183 + 0.0265217890557362i;-0.0173379980665268 + 0.0484564584457444i;0.0176776695296637 + 0.0426776695296637i;0.0366581169471928 + 0.0173379980665269i;0.0331542070773175 - 0.0100572187645354i;0.0146984450302420 - 0.0245228740117686i;-0.00438941627946356 - 0.0220670858091272i;-0.0132423376874806 - 0.00982118697983878i;-0.0106123067985757 + 0.00104522098944850i;-0.00344874224103679 + 0.00380510069311413i;0.00000000000000 + 0.00000000000000i;-0.00312575776684044 - 0.00344874224103678i;-0.00870929511135791 - 0.000857790697769332i;-0.00982118697983878 + 0.00728388868863723i;-0.00293291419087276 + 0.0147447553387909i;0.00880990891211875 + 0.0146984450302420i;0.0177212928864448 + 0.00537569542633741i;0.0173379980665268 - 0.00820026236993901i;0.00732233047033631 - 0.0176776695296637i;-0.00620363490434346 - 0.0173379980665268i;-0.0150516915593911 - 0.00804529675339107i;-0.0146984450302420 + 0.00368176881516431i;-0.00708068121688152 + 0.0105969883127822i;0.00145683546945314 + 0.00982118697983878i;0.00525468075825330 + 0.00431240505087395i;0.00344874224103679 - 0.000169425841969034i;0.00000000000000 + 0.00000000000000i;-0.000169425841969023 + 0.00344874224103679i;0.00431240505087395 + 0.00525468075825330i;0.00982118697983878 + 0.00145683546945315i;0.0105969883127822 - 0.00708068121688152i;0.00368176881516431 - 0.0146984450302420i;-0.00804529675339108 - 0.0150516915593911i;-0.0173379980665268 - 0.00620363490434346i;-0.0176776695296637 + 0.00732233047033631i;-0.00820026236993901 + 0.0173379980665268i;0.00537569542633740 + 0.0177212928864448i;0.0146984450302420 + 0.00880990891211875i;0.0147447553387909 - 0.00293291419087276i;0.00728388868863723 - 0.00982118697983878i;-0.000857790697769328 - 0.00870929511135792i;-0.00344874224103678 - 0.00312575776684044i;0.00000000000000 + 0.00000000000000i;0.00380510069311413 - 0.00344874224103679i;0.00104522098944850 - 0.0106123067985757i;-0.00982118697983878 - 0.0132423376874806i;-0.0220670858091272 - 0.00438941627946356i;-0.0245228740117686 + 0.0146984450302420i;-0.0100572187645353 + 0.0331542070773175i;0.0173379980665269 + 0.0366581169471928i;0.0426776695296637 + 0.0176776695296637i;0.0484564584457444 - 0.0173379980665269i;0.0265217890557362 - 0.0496187773685183i;-0.0146984450302420 - 0.0586794818341693i;-0.0532746578424459 - 0.0355969883127822i;-0.0662090645892645 + 0.00982118697983878i;-0.0437845832619082 + 0.0533516690710355i;0.00344874224103679 + 0.0702007610343501i];

short_t1 = ifft(ifftshift(Short_emulated/4),64).';
short_t2 = ifft(ifftshift(Short_emulated1/4),64).';


Pulse_t1 = ifft(ifftshift(Pulse_f*2),64).';
Pulse_t2 = ifft(ifftshift(Pulse_f1*2),64).';

cfg = wlanHTConfig('ChannelBandwidth','CBW20','MCS',2,'NumTransmitAntennas',1,'NumSpaceTimeStreams',1);
ht_ltf = wlanHTLTF(cfg).';
ht_sig = wlanHTSIG(cfg).';
ht_stf = wlanHTSTF(cfg).';
L_ltf = wlanLLTF(cfg).';
%L_stf = wlanLSTF(cfg).';

%sts_t = L_stf(1,:)/10;
sts_t_rep = repmat(sts_t, 1, 30);
%lts_t = L_ltf(1,33:96)/5;Pulse_t2
% 
% lts_f1 = [0 1 -1 -1 1 1 -1 1 -1 1 -1 -1 -1 -1 -1 1 1 -1 -1 1 -1 1 -1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 1 -1 -1 1 1 -1 1 -1 1 1 1 1 1 1 -1 -1 1 1 -1 1 -1 1 1 1 1];
% lts_t = ifft(lts_f1, 64);
% 
%lts_f2 = lts_f.*(1.0801+0.1543i);
%lts_t2 = ifft(lts_f2, 64);
% 
%lts_f3 = lts_f1.*(1.0911+0i);
%lts_t3 = ifft(lts_f3, 64);
% 
% lts_f2_jugate = conj(lts_f2);
% lts_t2_jugate = ifft(lts_f2_jugate, 64);
% 
% 
% lts_f3_jugate = -conj(lts_f3);
% lts_t3_jugate = ifft(lts_f3_jugate, 64);


preamble_legacy_A = [sts_t1,sts_t1, lts_t(33:64), lts_t_shifted1 ,lts_t_shifted1];%,sts_t1,sts_t1,sts_t1,sts_t1];%, lts_t, lts_t];
preamble_legacy_B = [sts_t2,sts_t2, lts_t(33:64), lts_t_shifted2, lts_t_shifted2];%,sts_t2,sts_t2,sts_t2,sts_t2];

%preamble_legacy_A = [sts_t1,sts_t1, lts_t(33:64), lts_t2, lts_t3_jugate];
%preamble_legacy_B = [sts_t1,sts_t1, lts_t(33:64), lts_t3, lts_t2_jugate];


%preamble_legacy_B = [sts_t_rep, lts_t(33:64), lts_t, lts_t];
% MIMO Preamble

%preamble_mimo_A = [ht_sig(1,:),ht_stf(1,:),ht_ltf(1,:)];
%preamble_mimo_B = [ht_sig(2,:),ht_stf(2,:),ht_ltf(2,:)];

% preamble_A = [preamble_legacy_A, preamble_mimo_A];
% preamble_B = [preamble_legacy_B, preamble_mimo_B];


preamble_A = preamble_legacy_A;
preamble_B = preamble_legacy_B;

% Sanity check variables that affect the number of Tx samples

%% Generate a payload of random integers

MAC_payload = randi([0,1],N_Data*2*MOD_ORDER,1);

Srambled_payload_standard = wlanScramble(MAC_payload,scramble_init);
numES = 2;
parsedData = reshape(Srambled_payload_standard,numES,[]).';
encodedData = wlanBCCEncode(parsedData,1/2);
%payload_standard = wlanBCCInterleave(encodedData,'HT',48,'CBW20');


tx_data_TX1 = encodedData(:,1);
tx_data_TX2 = encodedData(:,2);

% Functions for data -> complex symbol mapping (like qammod, avoids comm toolbox requirement)
% These anonymous functions implement the modulation mapping from IEEE 802.11-2012 Section 18.3.5.8


% Reshape the symbol vector into two different spatial streams

% Break up the matrix into a vector for each antenna
%tx_syms_A = dataSpMapped([38:53 55:63 67:75 77:89 91:91],6:25,1);
%tx_syms_B = dataSpMapped([38:53 55:63 67:75 77:89 91:91],6:25,2);

Emulate_16QAM_Constellation_Tx1 = [-1.0801 - 1.0801i,-1.080 - 0.4629i,-1.080 + 1.08i,-1.080 + 0.4629i,...
    -0.4621 - 0.7715i,-0.46291 - 0.1543i,-0.4291 + 1.08i,-0.4629 + 0.1543i,...
    1.0801 - 1.0801i,1.08 - 0.46291i,1.0801 + 1.0801i,1.08 + 0.46291i,...
    0.46291-1.08i,0.4629 - 0.1543i,0.4629 + 1.0801i,0.1543 + 0.46291i];

Emulate_16QAM_Constellation_Tx2 = [-0.8728 - 0.6546i,-0.87287 - 0.21822i,-0.8728 + 0.6546i,-0.87287 + 0.21822i,...
    -0.21822 - 0.87287i,-0.21822 - 0.43644i,-0.21822 + 0.87827i,-0.21822 + 0.43644i,...
    0.8728 - 0.6546i,0.87287 - 0.21822i,0.8728 + 0.6546i,0.87287 + 0.21822i,...
    0.2182 - 0.87287i,0.21822 - 0.43644i,0.2182 + 0.8728i,0.4364 + 0.2182i];

%Emulate_16QAM_Constellation_Tx3 = [(-1.08 + 1.08i),(-1.0800 +0.4629i),(-1.08 -0.1543i),(-1.0801 - 0.7715i),-0.4629 + 1.0801i,-0.4629 + 0.4629i,-0.4629 - 0.1543i,(-0.4629 - 0.7715i),0.4629 + 1.0801i,0.4629 + 0.4629i,0.4629 - 0.7715i,0.4629 - 0.1543i,(1.0801 - 0.1543i),(1.0801 +1.0801i),(1.08 + 0.4629i),(1.0801 - 0.7715i)];

sum_emulated16= [-0.97645 - 0.86735i,0.97645 - 0.86735i,-0.29535 - 0.9313i,0.34055 - 0.97645i,-0.9764 + 0.8673i,...
    0.97645 + 0.86735i, -0.32366 + 0.979135i,0.34055 + 0.97645i,-0.976435 - 0.34056i,...
    0.976435 - 0.340565i, -0.340565 - 0.29537i,0.34056 - 0.29537i,-0.976435 + 0.34056i,...
    0.976435 + 0.340565i,-0.34056 + 0.29537i,0.29535 + 0.340555i];

deviation_theory_16 = abs(sum_emulated16 - wlanConstellationMap(de2bi(0:15)',4));

Emulate_QPSK_Constellation_Tx1 = [-0.771 - 0.771i,-0.771 + 0.771i,0.771 - 0.771i,0.771 + 0.771i];
Emulate_QPSK_Constellation_Tx2 = [-0.872 - 0.654i,-0.872 + 0.654i,0.872 - 0.654i,0.872 + 0.654i];

standard_QPSK = [-0.707-0.707i,-0.707+0.707i,0.707-0.707i,0.707+0.707i];

deviation_theory_qpsk = abs((Emulate_QPSK_Constellation_Tx1 +Emulate_QPSK_Constellation_Tx2)/2 - standard_QPSK);

Emulate_11QAM_Constellation_Tx1 = [-1.0911 - 0.43644i,(-0.21822 -0.43644i),-0.4364 - 1.0911i,...
    0.4364 - 1.0911i,(0.43644-0.2182i),1.0911 - 0.4364i,...
    1.0911 + 0.43644i,(0.21822 +0.43644i),0.43644+1.0911i,...
    -0.43644+1.09i, -0.43644+0.21822i, -1.0911+0.4364i];

Emulate_11QAM_Constellation_Tx2 = [(-1.0801 -0.46291i),(-0.1543 -0.4629i),-0.4629 - 1.0801i,...
    0.46291-1.08i,0.4629 - 0.1543i,1.0801 - 0.4629i,...
    1.08+0.46291i,0.1543+0.46291i,0.46291+1.08i,...
    -0.46219+1.08i, -0.462191+0.1543i,-1.0801+0.4629i];



Emulate_9QAM_Constellation_Tx1 = [0.6546 + 0i,-0.6546 + 0i,0 - 0.6546i,0 + 0.6546i,...
    -0.65465 + 0.8728i,-0.65465 - 0.8728i, 0.65465 + 0.8728i,0.65465 - 0.8728i];

Emulate_9QAM_Constellation_Tx2 = [0.7715 + 0.1543i,-0.7715 + 0.1543i,0.1543 - 0.7715i,0.1543 + 0.7715i,...
    -0.7715 + 0.7715i,-0.7715 - 0.7715i,0.7715 + 0.7715i,0.7715 - 0.7715i];




Emulate_BPSK_Constellation_Tx1 = [(-1.08 + 0.1543i),(1.08 +0.1543i)];
Emulate_BPSK_Constellation_Tx2 = [(-1.09 + 0i),(1.09 - 0i)];
standard_BPSK = [-1,1];

deviation_theory_bpsk = abs((Emulate_BPSK_Constellation_Tx1 +Emulate_BPSK_Constellation_Tx2)/2 - standard_BPSK);

%tx_syms_mat_A = reshape(tx_syms_A, length(SC_IND_DATA), N_OFDM_SYMS); Use
%this with wlanConstellationmapping
%tx_syms_mat_B = reshape(tx_syms_B, length(SC_IND_DATA), N_OFDM_SYMS);

%tx_syms_mat_A = repmat(tx_syms_A,1,10); % use this with dataSpmapped
%tx_syms_mat_B = repmat(tx_syms_B,1,10);
demod_fcn_bpsk = @(x) double(real(x)>0);
demod_fcn_qpsk = @(x) double(2*(real(x)>0) + 1*(imag(x)>0));
demod_fcn_16qam = @(x) (8*(real(x)>0)) + (4*(abs(real(x))<0.6325)) + (2*(imag(x)>0)) + (1*(abs(imag(x))<0.6325));
demod_fcn_64qam = @(x) (32*(real(x)>0)) + (16*(abs(real(x))<0.6172)) + (8*((abs(real(x))<(0.9258))&&((abs(real(x))>(0.3086))))) + (4*(imag(x)>0)) + (2*(abs(imag(x))<0.6172)) + (1*((abs(imag(x))<(0.9258))&&((abs(imag(x))>(0.3086)))));

modvec_bpsk   =  (1/sqrt(2))  .* [-1 1];
modvec_16qam  =  (1/sqrt(10)) .* [-3 -1 +3 +1];
modvec_64qam  =  (1/sqrt(43)) .* [-7 -5 -1 -3 +7 +5 +1 +3];

mod_fcn_bpsk  = @(x) complex(modvec_bpsk(1+x),0);
mod_fcn_qpsk  = @(x) complex(modvec_bpsk(1+bitshift(x, -1)), modvec_bpsk(1+mod(x, 2)));
mod_fcn_16qam = @(x) complex(modvec_16qam(1+bitshift(x, -2)), modvec_16qam(1+mod(x,4)));
mod_fcn_64qam = @(x) complex(modvec_64qam(1+bitshift(x, -3)), modvec_64qam(1+mod(x,8)));

%MOD_ORDER = 16;

if MOD_ORDER == 16
    MAC_bits = randi([0 1],N_Data,1);
    encoded_bits = wlanBCCEncode(MAC_bits,CodeRate);
    de_bits = bi2de(reshape(encoded_bits,4,[])')+1;
    for j = 1:N_OFDM_SYMS
        for i = 1:length(SC_IND_DATA)
            chosen_constellation = de_bits(length(SC_IND_DATA)*(j-1) + i,1);
            tx_syms_mat_A(i,j) = Emulate_16QAM_Constellation_Tx1(chosen_constellation) ;
            tx_syms_mat_B(i,j) = Emulate_16QAM_Constellation_Tx2(chosen_constellation) ;

        end
    end
    tx_bits = arrayfun(demod_fcn_16qam, tx_syms_mat_A(:));
    tx_target = arrayfun(mod_fcn_16qam, tx_bits);
    tx_constellation = (tx_syms_mat_A(:) + tx_syms_mat_B(:))/2;

elseif MOD_ORDER == 4
        MAC_bits = randi([0 1],N_Data,1);
        encoded_bits = wlanBCCEncode(MAC_bits,CodeRate);
        de_bits = bi2de(reshape(encoded_bits,2,[])')+1;        
        tx_syms_mat = arrayfun(mod_fcn_qpsk, de_bits-1);

        for j = 1:N_OFDM_SYMS
            for i = 1:length(SC_IND_DATA)
                chosen_constellation = de_bits(length(SC_IND_DATA)*(j-1) + i,1);
                tx_syms_mat_A(i,j) = Emulate_QPSK_Constellation_Tx1(chosen_constellation);
                tx_syms_mat_B(i,j) = Emulate_QPSK_Constellation_Tx1(chosen_constellation);

            end
        end
        tx_bits = arrayfun(demod_fcn_qpsk, tx_syms_mat_A(:));
        tx_target = arrayfun(mod_fcn_qpsk, tx_bits);
        tx_constellation = (tx_syms_mat_A(:) + tx_syms_mat_B(:))/2;

elseif MOD_ORDER == 9
        for j = 1:N_OFDM_SYMS
            for i = 1:length(SC_IND_DATA)
                chosen_constellation = randi([1 8],1);
                tx_syms_mat_A(i,j) = Emulate_9QAM_Constellation_Tx1(chosen_constellation);
                tx_syms_mat_B(i,j) = Emulate_9QAM_Constellation_Tx2(chosen_constellation);

            end
        end
        tx_constellation = (tx_syms_mat_A(:) + tx_syms_mat_B(:))/2;

elseif MOD_ORDER == 11
        for j = 1:N_OFDM_SYMS
            for i = 1:length(SC_IND_DATA)
                chosen_constellation = randi([1 12],1);
                tx_syms_mat_A(i,j) = Emulate_11QAM_Constellation_Tx1(chosen_constellation);
                tx_syms_mat_B(i,j) = Emulate_11QAM_Constellation_Tx2(chosen_constellation);

            end
        end
        tx_constellation = (tx_syms_mat_A(:) + tx_syms_mat_B(:))/2;
        
        
elseif MOD_ORDER == 2
        MAC_bits = randi([0 1],N_Data,1);
        encoded_bits = wlanBCCEncode(MAC_bits,CodeRate);
        for j = 1:N_OFDM_SYMS
            for i = 1:length(SC_IND_DATA)
                chosen_constellation = encoded_bits(length(SC_IND_DATA)*(j-1) + i,1) +1;
                tx_syms_mat_A(i,j) = Emulate_BPSK_Constellation_Tx1(chosen_constellation);
                tx_syms_mat_B(i,j) = Emulate_BPSK_Constellation_Tx2(chosen_constellation);

            end
        end        
        tx_bits = arrayfun(demod_fcn_bpsk, tx_syms_mat_A(:));
        tx_target = arrayfun(mod_fcn_bpsk, tx_bits)/0.7071;
        tx_constellation = (tx_syms_mat_A(:) + tx_syms_mat_B(:))/2;

end



% Define the pilot tone values as BPSK symbols
%  We will transmit pilots only on RF A
% pilots_A = [1.0911 1.0911 1.0911 1.0911].';
% pilots_B = [(1.0811 -0.1543i) (1.0811 -0.1543i) (1.0811 -0.1543i) (1.0811 -0.1543i)].';  
% pilots_C = (pilots_A + pilots_B)/2;

pilots_A = [1.0911-0.43644i -(1.0911-0.43644i) 1.0911-0.43644i -(1.0911-0.43644i)].';
pilots_B = [1.08-0.46291i -(1.08-0.46291i) 1.08-0.46291i -(1.08-0.46291i)].';  
pilots_C = (pilots_A + pilots_B)/2;

% Repeat the pilots across all OFDM symbols
pilots_mat_A = repmat(pilots_A, 1, N_OFDM_SYMS);
pilots_mat_B = repmat(pilots_B, 1, N_OFDM_SYMS);
pilots_mat_C = repmat(pilots_C, 1, N_OFDM_SYMS);


%% IFFT

% Construct the IFFT input matrix
ifft_in_mat_A = zeros(N_SC, N_OFDM_SYMS);
ifft_in_mat_B = zeros(N_SC, N_OFDM_SYMS);

% Insert the data and pilot values; other subcarriers will remain at 0
ifft_in_mat_A(SC_IND_DATA, :)   = tx_syms_mat_A;
ifft_in_mat_A(SC_IND_PILOTS, :) = pilots_mat_A;



ifft_in_mat_B(SC_IND_DATA, :)   = tx_syms_mat_B;
ifft_in_mat_B(SC_IND_PILOTS, :) = pilots_mat_B;



%Perform the IFFT
tx_payload_mat_A = ifft(ifft_in_mat_A, N_SC, 1);
tx_payload_mat_B = ifft(ifft_in_mat_B, N_SC, 1);

% Insert the cyclic prefix
if(CP_LEN > 0)
    tx_cp = tx_payload_mat_A((end-CP_LEN+1 : end), :);
    tx_payload_mat_A = [tx_cp; tx_payload_mat_A];

    tx_cp = tx_payload_mat_B((end-CP_LEN+1 : end), :);
    tx_payload_mat_B = [tx_cp; tx_payload_mat_B];
end

% Reshape to a vector
tx_payload_vec_A = reshape(tx_payload_mat_A, 1, numel(tx_payload_mat_A));
tx_payload_vec_B = reshape(tx_payload_mat_B, 1, numel(tx_payload_mat_B));



% signal_mat_TX1 = reshape(Emulated_signal(:,1),160,length(Emulated_signal(:,1))/160);
% signal_mat_nocyc_TX1 = signal_mat_TX1(33:end,:);% Remove cylic preflix
% fft_mat_40M_NonInt_TX1 = fftshift(fft(signal_mat_nocyc_TX1,128),1);
% N_OFDM_SYMS1 = length(fft_mat_40M_NonInt_TX1(1,:));
% fft_mat_20M_NonInt_TX1 = [fft_mat_40M_NonInt_TX1(1:32,:);zeros(1,N_OFDM_SYMS1);fft_mat_40M_NonInt_TX1(98:128,:)];%fft_mat_40M_NonInt_TX1(1:64,:);
% 
% fft_mat_20M_NonInt_TX1([12;26;40;54], :) = repmat(pilots_A,1,N_OFDM_SYMS1);
% 
% 
% tx_syms_mat_A = ifft(ifftshift(fft_mat_20M_NonInt_TX1,1),64,1);
% time_tx1 = reshape([tx_syms_mat_A(49:end,:);tx_syms_mat_A],[],1);
% 
% signal_mat_TX2 = reshape(Emulated_signal(:,2),160,length(Emulated_signal(:,2))/160);
% signal_mat_nocyc_TX2 = signal_mat_TX2(33:end,:);% Remove cylic preflix
% fft_mat_40M_NonInt_TX2 = fftshift(fft(signal_mat_nocyc_TX2,128),1);
% 
% fft_mat_20M_NonInt_TX2 = [fft_mat_40M_NonInt_TX2(1:32,:);zeros(1,N_OFDM_SYMS1);fft_mat_40M_NonInt_TX2(98:128,:)];
% 
% fft_mat_20M_NonInt_TX2([12;26;40;54], :) = repmat(pilots_A,1,N_OFDM_SYMS1);
% 
% 
% tx_syms_mat_B = ifft(ifftshift(fft_mat_20M_NonInt_TX2,1),64,1);
% 
% time_tx2 = reshape([tx_syms_mat_B(49:end,:);tx_syms_mat_B],[],1);
% 
% combined_constellation = (fft_mat_20M_NonInt_TX2 + fft_mat_20M_NonInt_TX1)/2;
% combined_constellation_40M = fft_mat_40M_NonInt_TX2 + fft_mat_40M_NonInt_TX1;
% 
% %tx_vec_emu = Emulated_signal;
% 
% tx_vec_emu_20M = [time_tx1 time_tx2];
% 
% 
% %tx_vec = [lstf;lltf;lsig;htstf;htltf;htsig;tx_vec_emu];
% 
% %tx_vec = [lstf;tx_vec_emu];
% 
% %tx_vec = [tx_vec_EQ(1:960,:);tx_vec_emu];
% 
% 
% tx_vec = tx_vec_emu_20M;
% 


% Construct the full time-domain OFDM waveform
%tx_vec_A = [preamble_A tx_vec(:,1).' tx_vec(:,1).'];%lts_t_N(33:64) lts_t_N lts_t_N
%tx_vec_B = [preamble_B tx_vec(:,2).' tx_vec(:,1).'];%lts_t_N(33:64) lts_t_N lts_t_N

tx_vec_A = [preamble_A tx_payload_vec_A];%lts_t_N(33:64) lts_t_N lts_t_N
tx_vec_B = [preamble_B tx_payload_vec_B];%lts_t_N(33:64) lts_t_N lts_t_N
% Pad with zeros for transmission
tx_vec_padded_A = [zeros(1,500) tx_vec_A zeros(1,25000)];
tx_vec_padded_B = [zeros(1,500) tx_vec_B zeros(1,25000)];

%% Interpolate
if(INTERP_RATE == 1)
    tx_vec_air_A = tx_vec_padded_A;
    tx_vec_air_B = tx_vec_padded_B;
elseif(INTERP_RATE == 2)
	% Zero pad then filter (same as interp or upfirdn without signal processing toolbox)
    tx_vec_2x_A = zeros(1, 2*numel(tx_vec_padded_A));
    tx_vec_2x_A(1:2:end) = tx_vec_padded_A;
    tx_vec_air_A = filter(interp_filt2, 1, tx_vec_2x_A);
    tx_vec_2x_B = zeros(1, 2*numel(tx_vec_padded_B));
    tx_vec_2x_B(1:2:end) = tx_vec_padded_B;
    tx_vec_air_B = filter(interp_filt2, 1, tx_vec_2x_B);
end

% Scale the Tx vector to +/- 1
tx_vec_air_A = TX_SCALE .* tx_vec_air_A ./ max(abs(tx_vec_air_A));
tx_vec_air_B = TX_SCALE .* tx_vec_air_B ./ max(abs(tx_vec_air_B));


TX_NUM_SAMPS = 2^16;

if(USE_WARPLAB_TXRX)
    wl_basebandCmd(nodes, 'tx_delay', 0);
    wl_basebandCmd(nodes, 'tx_length', TX_NUM_SAMPS+100);                   % Number of samples to send
    wl_basebandCmd(nodes, 'rx_length', TX_NUM_SAMPS+SAMP_PADDING);      % Number of samples to receive
end

%%  Tx/Rx
for frame_ind = 1:30
    tx_mat_air = [tx_vec_air_A(:) , tx_vec_air_B(:)];
%tx_mat_air = [tx_vec_air_B(:) , tx_vec_air_A(:)];

% Write the Tx waveform to the Tx node
    wl_basebandCmd(node_tx, TX_RF_VEC, 'write_IQ', tx_mat_air);

    % Enable the Tx and Rx radios
    wl_interfaceCmd(node_tx, TX_RF, 'tx_en');
    wl_interfaceCmd(node_rx, RX_RF, 'rx_en');

    % Enable the Tx and Rx buffers
    wl_basebandCmd(node_tx, TX_RF, 'tx_buff_en');
    wl_basebandCmd(node_rx, RX_RF, 'rx_buff_en');

% Trigger the Tx/Rx cycle at both nodes

    eth_trig.send();

    % Retrieve the received waveform from the Rx node
    rx_mat_air = wl_basebandCmd(node_rx, RX_RF_VEC, 'read_IQ', 0, TX_NUM_SAMPS+SAMP_PADDING);

    rx_vec_air = rx_mat_air;


    % Disable the Tx/Rx radios and buffers
    wl_basebandCmd(node_tx, TX_RF_ALL, 'tx_rx_buff_dis');

    wl_basebandCmd(node_rx, RX_RF_ALL, 'tx_rx_buff_dis');

    wl_interfaceCmd(node_tx, TX_RF_ALL, 'tx_rx_dis');

    wl_interfaceCmd(node_rx, RX_RF_ALL, 'tx_rx_dis');

    % %% Spectrum analysis
    % 
    raw_rx_dec = filter(interp_filt2, 1, rx_vec_air);
    raw_rx_dec = raw_rx_dec(1:2:end);
    rx_IQ = raw_rx_dec;
    % 
   
%     cf = cf + 1;
%     figure(cf); clf;
%     subplot(2,1,1);
%     plot(real(rx_IQ), 'b');
%     axis([0 length(rx_IQ) -1 1])
%     grid on;
%     title('Rx Waveform (I)');
%     
%     subplot(2,1,2);
%     plot(imag(rx_IQ), 'r');
%     axis([0 length(rx_IQ) -1 1])
%     grid on;
%     title('Rx Waveform (Q)');
    % 
%     zoom_span_time    = 100/1000;                         % 100 ms 
%     ZOOM_SAMPLE_LIMIT = 4 * (zoom_span_time * 40e6);
%     
     M = 128;%floor(sqrt(42768));
     N = M;
%     
%     
%     
    rx_IQ_slice    = rx_IQ(1:(M*N),1);
    rx_IQ_mat      = reshape(rx_IQ_slice, M, N).';
    rx_spectrogram = fft(rx_IQ_mat, N, 2);
    
    % Zero out any DC offset
    rx_spectrogram(:,1) = zeros(M,1);
    
    % Perform an fftshift so that the DC frequency bin is in the middle
    rx_spectrogram = fftshift(rx_spectrogram,2);
%     
%     % Plot the Spectrogram on a dB scale
%     h = figure('units','pixels','Position',[100 100 2000 1000]);clf;
%     set(h,'PaperPosition',[.25 .25 20 10]);
%     
%     % Plot the entire view
%     if ( TX_NUM_SAMPS >= ZOOM_SAMPLE_LIMIT )
%         subplot(1,2,1)
%     end
%     
%     x_axis = linspace(-20,20,N);
%     y_axis = (0:(M-1)) / (40e6 / N);
%     imagesc(x_axis,y_axis,20*log10(abs(rx_spectrogram(1:20,:))./max(abs(rx_spectrogram(1:20,:)))));
%     caxis([-50 0])
%     colorbar
%     axis square
%     
%     xlabel('Frequency (MHz)')
%     ylabel('Time (s)')
%     title(sprintf('Spectrogram on dB Scale (%1.4f second view)'))
% 
%     x_plot = fftshift(reshape(abs(rx_spectrogram(10,:))./max(abs(rx_spectrogram(10,:))),4,128/4));
%     x_plot = max(x_plot);
%     y_plot = linspace(0,128,128/4);
%     
%     x_plot1 = reshape(circshift(upsample(abs(lts_f)./max(abs(lts_f)),2),4),4,128/4);
%     x_plot1 = max(x_plot1)*0.7;
%     y_plot1 = linspace(0,128,128/4);
%     
%     %plot(abs(rx_spectrogram(8,:))./max(abs(rx_spectrogram(8,:))));
%     figure(59)
%     plot(y_plot1,x_plot1,'r:','LineWidth',6);    %% Decode
%     hold on 
%     plot(y_plot,x_plot,'k-','LineWidth',7);
%     legend('Target frequency component','Emulated frequency component','FontSize',24)
%     xlabel('Frequency Component','FontSize',24);
%     ylabel('Amplitude','FontSize',24);
   
    % Complex cross correlation of Rx waveform with time-domain LTS
    sts_corr = abs(conv(conj(fliplr(sts_t)), sign(raw_rx_dec)));
    lts_corr = abs(conv(conj(fliplr(lts_t_shifted1)), sign(raw_rx_dec)));
    % Skip early and late samples - avoids occasional false positives from pre-AGC samples
    lts_corr = lts_corr(32:end-32);

    % Find all correlation peaks
    lts_peaks = find(lts_corr(1:2000) > LTS_CORR_THRESH*max(lts_corr));
    sts_peaks = find(sts_corr(1:1000) > STS_CORR_THRESH*max(sts_corr(1:1500)));

    % Select best candidate correlation peak as LTS-payload boundary
    [LTS1, LTS2] = meshgrid(lts_peaks,lts_peaks);
    [STS1, STS2] = meshgrid(sts_peaks,sts_peaks);

    [lts_second_peak_index,y] = find(LTS2-LTS1 == 64);
    [sts_second_peak_index,y_sts] = find(STS2-STS1 == 16);
    [STS_peak, STS_peak2] = meshgrid(sts_peaks(sts_second_peak_index),sts_peaks(sts_second_peak_index));
    [sts_valid_peak_index,y_stsvalid] = find(STS_peak-STS_peak2 == 16);
    possible_valid_sts = sts_peaks(sts_second_peak_index);
    valid_sts = possible_valid_sts(sts_valid_peak_index);
    %[c,lags] =  xcorr(raw_rx_dec,signal_various_symbolduration(17:56,1));%abs(conv(conj(fliplr(signal_various_symbolduration(17:56,1))), sign(time_Rx)));
    [c,lags] =  xcorr(raw_rx_dec,Pulse_t);
%     figure(55)
%     stem(lags,abs(c));
%     
%     custom_peaks = find(abs(c(42768:42768+10000)) > 0.8*max(abs(c)));
% 
%     % Select best candidate correlation peak as LTS-payload boundary
%     [custom_peaks_s1, custom_peaks_s2] = meshgrid(custom_peaks,custom_peaks);
%     [custom_second_peak_index,y] = find(custom_peaks_s2-custom_peaks_s1 == 64);
    % Stop if no valid correlation peak was found

%     cf = cf + 1;
%     figure(cf); clf;
%     lts_to_plot = sts_corr(1:1500);
%     plot(lts_to_plot, '.-b', 'LineWidth', 1);
%     hold on;
%     grid on;
%     line([1 length(lts_to_plot)], LTS_CORR_THRESH*max(lts_to_plot)*[1 1], 'LineStyle', '--', 'Color', 'r', 'LineWidth', 2);
%     title('LTS Correlation and Threshold')
%     xlabel('Sample Index')
%     myAxis = axis();
%     axis([1, 1000, myAxis(3), myAxis(4)])
%     if(isempty(custom_second_peak_index))
%         failed_frame = failed_frame + 1;
%         continue
%     end
    %pause(0.002);
    %continue
    if(length(valid_sts) <= 2 )
        failed_sts = failed_sts + 1;        
%         BER(frame_ind) = 1;
%         continue
    end
    
    if(isempty(lts_second_peak_index) == 1 )
        failed_lts = failed_lts + 1;
        BER(frame_ind) = 1;
        continue
    end
    
   
    % Set the sample indices of the payload symbols and preamble
    % The "+32" corresponds to the 32-sample cyclic prefix on the preamble LTS
    % The "-160" corresponds to the length of the preamble LTS (2.5 copies of 64-sample LTS)
%     HT_preamble_ind = lts_peaks(max(lts_second_peak_index)) + 32;
% 
%     payload_ind = HT_preamble_ind ;
% 
%     lts_ind = HT_preamble_ind -160;
% 
%     extra_preamble = payload_ind -160;
% 
% 
%     if(lts_ind < 1 )
%         continue
%     end
%     %Extract LTS (not yet CFO corrected)
%     rx_lts = raw_rx_dec(lts_ind: lts_ind+159);
%     rx_lts1 = rx_lts(-64+-FFT_OFFSET + [97:160]);
%     rx_lts2 = rx_lts(-FFT_OFFSET + [97:160]);
% 
%     %Calculate coarse CFO est
%     rx_cfo_est_lts = mean(unwrap(angle(rx_lts2 .* conj(rx_lts1))));
%     %rx_cfo_est_lts_emulated = mean(unwrap(angle(rx_lts3 .* conj(rx_lts4))));
% raw_rx_dec
%     rx_cfo_est_lts_average = rx_cfo_est_lts;% + rx_cfo_est_lts_emulated*1/4;
%     rx_cfo_est_lts = rx_cfo_est_lts_average/(2*pi*64);
% 
% 
%     % Apply CFO correction to raw Rx waveform
%     rx_cfo_corr_t = exp(-1i*2*pi*rx_cfo_est_lts*[0:length(raw_rx_dec)-1]);
%     rx_dec_cfo_corr = raw_rx_dec.' .* rx_cfo_corr_t;
% 
% 
% 
%     % Re-extract LTS for channel estimate
%     rx_lts = rx_dec_cfo_corr(lts_ind : lts_ind+159);
%     rx_lts1 = rx_lts(-64+-FFT_OFFSET + [97:160]);
%     rx_lts2 = rx_lts(-FFT_OFFSET + [97:160]);
%     rx_lts1_f = fft(rx_lts1);
%     rx_lts2_f = fft(rx_lts2);

    mimo_training_ind = lts_peaks(lts_second_peak_index(1)) + 32 ;
    payload_ind = mimo_training_ind  ;

    % Subtract of 2 full LTS sequences and one cyclic prefixes
    % The "-160" corresponds to the length of the preamble LTS (2.5 copies of 64-sample LTS)
    lts_ind = mimo_training_ind-160;

    if(DO_APPLY_CFO_CORRECTION)
        %Extract LTS (not yet CFO corrected)
        rx_lts = raw_rx_dec(lts_ind : lts_ind+159); %Extract the first two LTS for CFO
        rx_lts1 = rx_lts(-64+-FFT_OFFSET + [97:160]);
        rx_lts2 = rx_lts(-FFT_OFFSET + [97:160]);

        %Calculate coarse CFO est
        rx_cfo_est_lts = mean(unwrap(angle(rx_lts2 .* conj(rx_lts1))));
        rx_cfo_est_lts = rx_cfo_est_lts/(2*pi*64);
    else
        rx_cfo_est_lts = 0;
    end

    % Apply CFO correction to raw Rx waveforms
    rx_cfo_corr_t = exp(-1i*2*pi*rx_cfo_est_lts*[0:length(raw_rx_dec)-1]);
    rx_dec_cfo_corr = raw_rx_dec.' .* rx_cfo_corr_t;
    
    rx_lts = rx_dec_cfo_corr(lts_ind : lts_ind+159);
    rx_lts1 = rx_lts(-64+-FFT_OFFSET + [97:160]);
    rx_lts2 = rx_lts(-FFT_OFFSET + [97:160]);
    rx_lts1_f = fft(rx_lts1);
    rx_lts2_f = fft(rx_lts2);
    
    rx_H_est = lts_f_shifted1 .* (rx_lts1_f + rx_lts2_f)/2;
%     rx_lts_Y = rx_dec_cfo_corr(lts_ind : lts_ind+159+160);
%     rx_lts1_Y3 = rx_lts_Y(-64+-FFT_OFFSET + [97:160]);
%     rx_lts2_Y4 = rx_lts_Y(-FFT_OFFSET + [97:160]);
% 
%     rx_lts1_f = fft(rx_lts1_Y3);
%     rx_lts2_f = fft(rx_lts2_Y4);
%     
%     tx_matrix = [lts_f2;lts_f3];
%     y_matrix = [rx_lts1_f;conj(rx_lts2_f)];
%     H_cell = cell(64,1);
%     for sub_ind = 1:64
%         y_sym = y_matrix(:,sub_ind);
%         x_sym = tx_matrix(:,sub_ind);
%         H_cell{sub_ind,1} = y_sym*(pinv(x_sym));
%         H11(sub_ind,1) = H_cell{sub_ind,1}(1,1);
%         H21(sub_ind,1) = H_cell{sub_ind,1}(1,2);
%     end
%     % Calculate channel estimate from average of 2 training symbols
%     rx_H_est = (H11+H21).'/2;
    
    % Calculate channel estimate from average of 2 training symbols
    


    rx_est = rx_H_est;%*6/8 + rx_H_est*2/8;
    rx_est_MMSE = (rx_H_est.'*inv(rx_H_est*rx_H_est.')).';
    syms_eq_mat_A = zeros(N_SC, N_OFDM_SYMS);
    syms_eq_mat_B = zeros(N_SC, N_OFDM_SYMS);
    channel_condition_mat = zeros(1,N_SC);



    %% Rx payload processing

    % Extract the payload samples (integral number of OFDM symbols following preamble)
    payload_vec = rx_dec_cfo_corr(payload_ind : payload_ind+(N_OFDM_SYMS)*(N_SC+CP_LEN)-1);
    payload_mat = reshape(payload_vec, (N_SC+CP_LEN), N_OFDM_SYMS);

    % Remove the cyclic prefix, keeping FFT_OFFSET samples of CP (on average)
    payload_mat_noCP = payload_mat(CP_LEN-FFT_OFFSET+[1:N_SC], :);

    % Take the FFTpayload_mat_noCP
    syms_f_mat = fft(payload_mat_noCP, N_SC, 1);

    % Equalize (zero-forcing, just divide by complex chan estimates)
    syms_eq_mat_MMSE = syms_f_mat./repmat(rx_est_MMSE.',1, N_OFDM_SYMS);
  
    syms_eq_mat = syms_f_mat./repmat(rx_est.',1, N_OFDM_SYMS);


    pilots_f_mat = syms_eq_mat(SC_IND_PILOTS, :);
    pilots_f_mat_comp = pilots_f_mat.*pilots_mat_C*exp(-1i*pi/4);

    pilots_f_mat_MMSE = syms_eq_mat_MMSE(SC_IND_PILOTS, :);
    pilots_f_mat_comp_MMSE = pilots_f_mat_MMSE.*pilots_mat_C*exp(-1i*pi/4);

    % Calculate the phases of every Rx pilot tone
    pilot_phases = unwrap(angle(fftshift(pilots_f_mat_comp,1)), [], 1);
    pilot_phases_MMSE = unwrap(angle(fftshift(pilots_f_mat_comp_MMSE,1)), [], 1);


    % Calculate slope of pilot tone phases vs frequency in each OFDM symbol
    pilot_spacing_mat = repmat(mod(diff(fftshift(SC_IND_PILOTS)),64).', 1, N_OFDM_SYMS);                        
    pilot_slope_mat = mean(diff(pilot_phases) ./ pilot_spacing_mat);
% 
    pilot_spacing_mat_MMSE = repmat(mod(diff(fftshift(SC_IND_PILOTS)),64).', 1, N_OFDM_SYMS);                        
    pilot_slope_mat_MMSE = mean(diff(pilot_phases_MMSE) ./ pilot_spacing_mat_MMSE);

    

    % Calculate the SFO correction phases for each OFDM symbol
    pilot_phase_sfo_corr = fftshift((-32:31).' * pilot_slope_mat, 1);
    pilot_phase_corr = exp(-1i*(pilot_phase_sfo_corr));


    pilot_phase_sfo_corr_MMSE = fftshift((-32:31).' * pilot_slope_mat_MMSE, 1);
    pilot_phase_corr_MMSE = exp(-1i*(pilot_phase_sfo_corr_MMSE));
    
    % Apply the pilot phase correction per symbol
    %syms_eq_mat = syms_eq_mat .* pilot_phase_corr;
    syms_eq_mat = syms_eq_mat .* (pilot_phase_corr);
    syms_eq_mat_MMSE = syms_eq_mat_MMSE .*(pilot_phase_corr_MMSE);

  
    pilots_f_mat = syms_eq_mat(SC_IND_PILOTS, :);
    pilots_f_mat_comp = pilots_f_mat.*pilots_mat_C;
    pilot_phase_err = angle(mean(pilots_f_mat_comp));
    
    pilots_f_mat_MMSE = syms_eq_mat_MMSE(SC_IND_PILOTS, :);
    pilots_f_mat_comp_MMSE = pilots_f_mat_MMSE.*pilots_mat_C;
    pilot_phase_err_MMSE = angle(mean(pilots_f_mat_comp_MMSE));
    

    pilot_phase_err_corr = repmat(pilot_phase_err, N_SC, 1);
    pilot_phase_corr = exp(-1i*(pilot_phase_err_corr));
    syms_eq_pc_mat = syms_eq_mat .* (pilot_phase_corr);
    payload_syms_mat = syms_eq_pc_mat(SC_IND_DATA, :);
    
    pilots_corrected = syms_eq_pc_mat(SC_IND_PILOTS,:);
    pilot_error = pilots_corrected*exp(-1i*pi/8) - pilots_f_mat*exp(1i*pi/8);
    noise_est(frame_ind) = mean(real(pilot_error(1:20).*conj(pilot_error(1:20))));
    SNR(frame_ind) = 10*log10(1/noise_est(frame_ind));
    
    pilot_phase_err_corr_MMSE = repmat(pilot_phase_err_MMSE, N_SC, 1);
    pilot_phase_corr_MMSE = exp(-1i*(pilot_phase_err_corr_MMSE));
    syms_eq_pc_mat_MMSE = syms_eq_mat_MMSE .* (pilot_phase_corr_MMSE);
    payload_syms_mat_MMSE = syms_eq_pc_mat_MMSE(SC_IND_DATA, :);

    %% Demodulate
    rx_syms = reshape(payload_syms_mat, 1, N_DATA_SYMS);
    rx_syms_snr = reshape(payload_syms_mat, 1, N_DATA_SYMS)*exp(-1i*0.3927*2)*1.4./max(abs(rx_syms)) ;


    rx_syms_MMSE = reshape(payload_syms_mat_MMSE, 1, N_DATA_SYMS)*exp(-1i*0.3927*2);
    rx_syms_snr_MMSE = reshape(payload_syms_mat_MMSE, 1, N_DATA_SYMS)*exp(-1i*0.3927*2)*1.4./max(abs(rx_syms_MMSE)) ;

    
    
    switch(MOD_ORDER)
        case 2         % BPSK
            rx_data = arrayfun(demod_fcn_bpsk, rx_syms_snr);
            rx_data_bits = reshape(de2bi(rx_data)',[],1);

        case 4         % QPSK
            rx_data = arrayfun(demod_fcn_qpsk, rx_syms_snr);
            rx_data_bits = reshape(de2bi(rx_data)',[],1);
        case 16        % 16-QAM
            rx_data = arrayfun(demod_fcn_16qam, rx_syms_snr);
            rx_data_bits = reshape(de2bi(rx_data)',[],1);
        case 64        % 64-QAM
            rx_data = arrayfun(demod_fcn_64qam, rx_syms);
    end
    % evm_mat = abs(rx_syms_snr.' - tx_syms_mat).^2;
    % aevms = mean(evm_mat(:));
    % snr = 10*log10(1./aevms)

    decoded_bits = wlanBCCDecode(rx_data_bits,CodeRate,'hard');
    average_divation(frame_ind) = mean(abs(rx_syms_snr-tx_constellation.'));
    average_divation_MMSE(frame_ind) = mean(abs(rx_syms_snr_MMSE-tx_constellation.'));

    average_divation_target(frame_ind) = mean(abs(rx_syms_snr_MMSE-tx_target.'));

    EVM(frame_ind) = mean(abs(rx_syms_snr-tx_constellation.').^2);
    EVM_MMSE(frame_ind) = mean(abs(rx_syms_snr_MMSE-tx_constellation.').^2);
    snr(frame_ind) = 10*log10(1./EVM(frame_ind));
    snr_MMSE(frame_ind) = 10*log10(1./EVM_MMSE(frame_ind));
    %% Plot Results
    %cf = 1;

    % Tx signal
    %cf = cf + 1;
    % figure(cf); clf;
    % 
    % subplot(2,1,1);
    % plot(real(tx_mat_air), 'b');
    % axis([0 length(tx_mat_air) -TX_SCALE TX_SCALE])
    % grid on;
    % title('Tx Waveform (I)');
    % 
    % subplot(2,1,2);
    % plot(imag(tx_mat_air), 'r');
    % axis([0 length(tx_mat_air) -TX_SCALE TX_SCALE])
    % grid on;
    % title('Tx Waveform (Q)');

    % Rx signal
    cf = cf + 1;
    figure(cf); clf;
    subplot(2,1,1);
    plot(real(rx_vec_air), 'b');
    axis([0 length(rx_vec_air) -TX_SCALE TX_SCALE])
    grid on;
    title('Rx Waveform (I)');

    subplot(2,1,2);
    plot(imag(rx_vec_air), 'r');
    axis([0 length(rx_vec_air) -TX_SCALE TX_SCALE])
    grid on;
    title('Rx Waveform (Q)');


    % Channel Estimates
%    cf = cf + 1;

%     rx_H_est_plot = repmat(complex(NaN,NaN),1,length(rx_H_est));
%     rx_H_est_plot(SC_IND_DATA) = rx_H_est(SC_IND_DATA);
%     rx_H_est_plot(SC_IND_PILOTS) = rx_H_est(SC_IND_PILOTS);
% 
%     x = (20/N_SC) * (-(N_SC/2):(N_SC/2 - 1));
    % 
    % figure(cf); clf;
    % subplot(2,1,1);
    % stairs(x - (20/(2*N_SC)), fftshift(real(rx_H_est_plot)), 'b', 'LineWidth', 2);
    % hold on
    % stairs(x - (20/(2*N_SC)), fftshift(imag(rx_H_est_plot)), 'r', 'LineWidth', 2);
    % hold off
    % axis([min(x) max(x) -1.1*max(abs(rx_H_est_plot)) 1.1*max(abs(rx_H_est_plot))])
    % grid on;
    % title('Channel Estimates (I and Q)')
    % 
    % subplot(2,1,2);
    % bh = bar(x, fftshift(abs(rx_H_est_plot)),1,'LineWidth', 1);
    % shading flat
    % set(bh,'FaceColor',[0 0 1])
    % axis([min(x) max(x) 0 1.1*max(abs(rx_H_est_plot))])
    % grid on;
    % title('Channel Estimates (Magnitude)')
    % xlabel('Baseband Frequency (MHz)')


    %% Pilot phase error estimate
%     cf = cf + 1;
%     figure(cf); clf;
%     subplot(2,1,1)
%     plot(pilot_phase_err, 'b', 'LineWidth', 2);
%     title('Phase Error Estimates')
%     xlabel('OFDM Symbol Index')
%     ylabel('Radians')
%     axis([1 N_OFDM_SYMS -3.2 3.2])
%     grid on
% 
%     h = colorbar;
%     set(h,'Visible','off');
% 
%     subplot(2,1,2)
%     imagesc(1:N_OFDM_SYMS, (SC_IND_DATA - N_SC/2), fftshift(pilot_phase_sfo_corr,1))
%     xlabel('OFDM Symbol Index')
%     ylabel('Subcarrier Index')
%     title('Phase Correction for SFO')
%     colorbar
%     myAxis = caxis();
%     if(myAxis(2)-myAxis(1) < (pi))
%        caxis([-pi/2 pi/2])
%     end

    %% Symbol constellation'
%     cf = cf + 1;
%     figure(cf); clf;
%     payload_syms_mat_plot = rx_syms_snr;
%     plot(payload_syms_mat_plot,'ro','MarkerSize',1);
%     axis square; axis(3*[-1 1 -1 1]);

%     
%     cf = cf + 1;
%     figure(cf); clf;
%     payload_syms_mat_plot_MMSE = rx_syms_snr_MMSE;
%     plot(payload_syms_mat_plot_MMSE,'ro','MarkerSize',1);
%     axis square; axis(3*[-1 1 -1 1]);
%     grid on;
%     hold on;

% 
%     cf = cf + 1;
%     figure(cf); clf;
%     scale = max(max(abs(payload_syms_mat_plot)));
%     plot(payload_syms_mat_plot./scale,'ro','MarkerSize',1);
%     axis square; axis([-1 1 -1 1]);
%     grid on;
%     hold on;
    pause(200/1000);



%advalue = mean(average_divation(find(average_divation<0.4)));

% 
% noise_floor = 0.0260;
% receive_signal_strength = max(abs(rx_vec_air(1600:10000,1)));
% SNR(frame_ind) = 10*log10(receive_signal_strength/noise_floor);
% 
%BER_encoded = length(find(abs(double(rx_data_bits - encoded_bits))~=0))/9000;
BER(frame_ind) = length(find(abs(double(decoded_bits) - MAC_bits(1:end))~=0))/9000;
end
BER_MEAN = mean(BER);
% BER_Deviation_TARGET = mean(average_divation_target);

BER_SNR = mean(snr_MMSE);
BER_Devitaion = mean(average_divation_MMSE);

% BBBBB = [snr;average_divation];
% BBBBB1 = [snr_MMSE;average_divation_MMSE];
% Compare= [BBBBB;BBBBB1];